-*- mode: org -*-

Guile Config is a library providing a declarative approach to application
configuration specification.  The library provides clean configuration
declaration forms, and processors that take care of:

- Configuration file creation
- Configuration file parsing
- Command-line parameter parsing using getopt-long
- Basic GNU command-line parameter generation (--help, --usage, --version)
- Output generation for (compiled from the configuration declaration):
  + --help and --usage
  + --version
- Automatic deduction of short-versions of argument names
- Support for arbitrarily nested subcommands
- Support for keyword parameters as well as positional parameters

* Dev Tasks

** DONE Stage 1: Compile Configuration Declarations

*** TODO This involves merging inheritance
    - for-each sub-command, decide what to do if any given configuration-field
      is not given: inherit from parent, leave empty or set to default?
    - for-each sub-command, inject parent's inheritable keywords & arguments
      if they are set to inheritable & the sub-command is set to inheritable.
    
    This process needs to be completed or be transparently completeable when
    we hand over to `parser-writer` for configuration file writing.

**** Metadata inheritance

     Many metadata fields are inheritable: author, copyright, licenseâ€¦ these
     are all fields that could be overriden in sub-commands, but could just be
     the same throughout the project.

**** Keyword inheritance

    Most keywords are valid only within the context of their (sub-)command.
    However, if a keyword is set to be inheritable? by the root command, and
    is inherited by each (sub-)command, then such a keyword is considered
    *global*.  Global keywords are relevant to `parsers`: they should be
    written to a *global* program settings section, so they don't have to be
    toggled individually in all configuration files for the sub-commands.

    keyword properties:
    - global: defined in root, inherited everywhere
    - inherited: defined in parent, inherited locally & inheritable? to
      children
    - local: defined locally, but not inheritable?

***** Revised keyword inheritance

      A simplified inheritance schema works as follows:
      - A new property of configurations is added: 'wanted'.
      - it accepts an assoc-list (defaulting to '())
        + keys: keywords or arguments
        + values: 'names' of the keywords or arguments that desire to be
          inherited from the parent.
      - This schema requires a little more typing in the case of a large set
        of standard inheritable fields to each sub-command
      - It also requires a lot less inheritance? flag fiddling in the common
        case of a few options that want to be inherited, and not to all
        subcommands.
      - It also addresses the case whereby one subcommand wants to inherit a
        specific setting from its parent, but a sibling subconfiguration does
        not.
      - It also makes the code faster & simpler:
        - we always merely need to check the assoc-list to determine
          inheritance rules, and then map assoc over the keywords/arguments
          field of the parent to retrieve the inherited fields
        - we remove the need for configuration level inheritance? checking for
          valus inheritance:

* Specification

  Guile Config expects a <configuration> as an input.  <configuration>s are a
  recursive data type that contains configuration specifications for your
  application.  The library will parse the specification, create configuration
  files as needed, parse them, and finally generate a <codex>.

  <codex>es are record types that can be interacted with in a very similar way
  as the interface provided by `getopt-long` (i.e. option-ref).

* Flow of Control

  +---------------------+
  | config declaration  |
  +---------------------+
            |
  +-----------------------+   +-----------------------+\
  | Generate configbag    |-->| create config files   | } OUTPUT
  +-----------------------+   +-----------------------+/
            |                            |
            |       ====================================================================
            |       |                    |                                             |
            |       |        +-----------------------+   +-----------------------+     |\
            |       |        |    Load fileconfigs   |   | Command Line Arguments|     | } INPUT
            |       |        +-----------------------+   +-----------------------+     |/
            |       |                    |                           |                 |
            |       ====================================================================
            |                            |                           |
            |                +-----------------------+   +-----------------------+
            \--------------->| Collapse to flatconfig|<--|  Establish Subcommand |
                             +-----------------------+   +-----------------------+
                                     |
                                     |                         ============================
                    +------------------------+         Yes     |                OUTPUT    |
                    | Emit message desired?  |-----------------|------------\             |
                    +------------------------+                 |            |             |
                                     |                         |            |             |
                                     | No                      |            |             |
                                     |                         |            |             |
                                     |                         |            |             |
                                     |                         |            |             |
                                     |                         |            |             |
                                     |                         |            |             |
                                     |                         |            |             |
                 +---------------------------------+           |    +--------------+      |
                 | Turn flatconfig -> getoptconfig |           |    | Emit Message |      |
                 +---------------------------------+           |    +--------------+      |
                                     |                         |            |             |
                                     |                         |            |             |
                       +--------------------------+            |            |             |
                       |  parse commandline args  |            |            |             |
                       +--------------------------+            |            |             |
                                     |                         |            |             |
                          ========================             |            |             |
                          |          |           |             |            |             |
                          |  +----------------+  |             |            |             |
                          |  |   Run program  |  |             |            |             |
                          |  +----------------+  |             |            |             |
                          |          |           |             |            |             |
                          |          |           |             |            |             |
                          |    +----------+      |             |      +----------+        |
                          |    |   Exit   |      |             |      |   Exit   |        |
                          |    +----------+      |             |      +----------+        |
                          |                      |             ============================
                          |     PROGRAM CONTROL  |
                          ========================

* Objects Overview

  - User Interface (high level):
    + configuration
    + secret
    + switch
    + setting
    + argument
    + license
    + parser
    + path

  - Internal
    + codex
      * metadata
      * features
      * values

* User Interface Objects

** <configuration>                  | (guix records)
   - name                           | symbol
   - synopsis                       | string
   - description                    | string
   - keyword-parameters             | list[<secret> <switch> <setting>]
   - positional-parameters          | list[<argument>]
   - subcommands                    | list[<configuration>]
   - directory                      | list[<path>] || <path>
   - generate-help?                 | boolean[#t]
   - generate-usage?                | boolean[#t]
   - generate-version?              | boolean[#t]
   - version                        | string
   - license                        | <license>
   - copyright                      | list[number]
   - author                         | string
   - parser                         | <parser>
   - alias                          | symbol

** <secret>                         | (guix records)
   - name                           | symbol
   - value                          | mixed
   - synopsis                       | string

** <setting>                        | (guix records)
   - name                           | symbol
   - value                          | mixed
   - test                           | predicate
   - handler                        | proc(string -> mixed)
   - character                      | char
   - synopsis                       | string
   - description                    | string
   - example                        | string
   - optional                       | boolean[#t]

** <switch>                         | (guix records)
   - name                           | symbol
   - value                          | mixed
   - test                           | predicate
   - handler                        | proc(string -> mixed)
   - character                      | char
   - synopsis                       | string
   - description                    | string
   - example                        | string
   - optional                       | boolean[#t]

** <argument>                       | (guix records)
   - name                           | symbol
   - value                          | mixed
   - test                           | predicate
   - handler                        | proc(string -> mixed)
   - synopsis                       | string
   - description                    | string
   - example                        | string
   - optional                       | boolean[#f]

** <license>                        | (srfi srfi-9)
   - id                             | symbol
   - name                           | string
   - url                            | uri

** <parser>                         | (srfi srfi-9)
   - id                             | symbol
   - reader                         | proc(IO[in] -> <fileconfig>)
   - writer                         | proc(<flatconfig> -> IO[out])

** <path>                           | (guix records)
   - given                          | string
   - eager?                         | boolean[#t]

* Internal Objects

** <codex>                          | (srfi srfi-9)
   - <features>
     + name
     + synopsis
     + description
     + alias
     + subcommands
   - <metadata>
     + directory
     + version
     + license
     + copyright
     + author
     + parser
     + generate-help?
     + generate-usage?
     + generate-version?
     + generate-cmdtree?
   - <valus>
     + keyword-parameters
     + arguments
   - <reagents>
     + inverted
     + commandline
     + raw
     + configuration
